require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase avec la cl√© de service
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'Pr√©sent' : 'Manquant');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? 'Pr√©sent' : 'Manquant');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function addMissingCogstudioAccess() {
  console.log('üîß Ajout de l\'acc√®s Cogstudio manquant...');
  
  const userEmail = 'regispailler@gmail.com';
  const moduleId = '6'; // Cogstudio
  
  try {
    // 1. R√©cup√©rer l'utilisateur
    console.log('\nüìã R√©cup√©ration de l\'utilisateur...');
    const { data: userData, error: userError } = await supabase.auth.admin.getUserByEmail(userEmail);
    
    if (userError || !userData?.user) {
      console.error('‚ùå Utilisateur non trouv√©:', userEmail);
      return;
    }
    
    console.log('‚úÖ Utilisateur trouv√©:', userData.user.id);
    
    // 2. V√©rifier si le module existe
    console.log('\nüìã V√©rification du module...');
    const { data: moduleData, error: moduleError } = await supabase
      .from('modules')
      .select('id, title, price')
      .eq('id', moduleId)
      .single();
      
    if (moduleError || !moduleData) {
      console.error('‚ùå Module non trouv√©:', moduleId);
      return;
    }
    
    console.log('‚úÖ Module trouv√©:', moduleData.title, '(Prix:', moduleData.price + ')');
    
    // 3. V√©rifier si l'acc√®s existe d√©j√†
    console.log('\nüìã V√©rification de l\'acc√®s existant...');
    const { data: existingAccess, error: checkError } = await supabase
      .from('module_access')
      .select('id, created_at')
      .eq('user_id', userData.user.id)
      .eq('module_id', parseInt(moduleId))
      .single();
      
    if (existingAccess) {
      console.log('‚úÖ Acc√®s d√©j√† existant cr√©√© le:', new Date(existingAccess.created_at).toLocaleString());
      return;
    }
    
    console.log('‚ùå Aucun acc√®s trouv√© - ajout en cours...');
    
    // 4. Cr√©er l'acc√®s module
    console.log('\nüìù Cr√©ation de l\'acc√®s module...');
    const { data: accessData, error: accessError } = await supabase
      .from('module_access')
      .insert({
        user_id: userData.user.id,
        module_id: parseInt(moduleId),
        access_type: 'purchase',
        metadata: {
          session_id: 'manual_fix_' + Date.now(),
          purchased_at: new Date().toISOString(),
          reason: 'Correction manuelle - acc√®s manquant apr√®s paiement'
        }
      })
      .select()
      .single();
      
    if (accessError) {
      console.error('‚ùå Erreur cr√©ation acc√®s module:', accessError);
    } else {
      console.log('‚úÖ Acc√®s module cr√©√©:', accessData.id);
      console.log('üìÖ Cr√©√© le:', new Date(accessData.created_at).toLocaleString());
    }
    
    // 5. V√©rifier que l'acc√®s a √©t√© cr√©√©
    console.log('\nüîç V√©rification finale...');
    const { data: verifyAccess, error: verifyError } = await supabase
      .from('module_access')
      .select('id, created_at')
      .eq('user_id', userData.user.id)
      .eq('module_id', parseInt(moduleId))
      .single();
      
    if (verifyAccess) {
      console.log('‚úÖ Acc√®s v√©rifi√©:', verifyAccess.id);
      console.log('‚úÖ L\'utilisateur peut maintenant acc√©der √† Cogstudio');
    } else {
      console.log('‚ùå Erreur lors de la v√©rification');
    }
    
    // 6. V√©rifier tous les acc√®s de l'utilisateur
    console.log('\nüìã Tous les acc√®s de l\'utilisateur:');
    const { data: allAccess, error: allAccessError } = await supabase
      .from('module_access')
      .select('id, module_id, access_type, created_at')
      .eq('user_id', userData.user.id)
      .order('created_at', { ascending: false });
      
    if (!allAccessError && allAccess) {
      console.log('‚úÖ Acc√®s totaux:', allAccess.length);
      allAccess.forEach((access, index) => {
        console.log(`  ${index + 1}. Module ID: ${access.module_id}, Type: ${access.access_type}, Cr√©√©: ${new Date(access.created_at).toLocaleString()}`);
      });
    }
    
    console.log('\nüîß Correction termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout:', error);
  }
}

addMissingCogstudioAccess().catch(console.error); 