require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUserStableDiffusion() {
  console.log('üîç V√©rification de l\'acc√®s Stable Diffusion pour regispailler@gmail.com');
  
  try {
    // 1. V√©rifier si l'utilisateur existe
    console.log('\n1Ô∏è‚É£ V√©rification de l\'utilisateur...');
    const { data: userData, error: userError } = await supabase
      .from('profiles')
      .select('id, email, created_at')
      .eq('email', 'regispailler@gmail.com')
      .single();

    if (userError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateur:', userError);
      return;
    }

    if (!userData) {
      console.log('‚ùå Utilisateur regispailler@gmail.com non trouv√©');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:', {
      id: userData.id,
      email: userData.email,
      created_at: userData.created_at
    });

    // 2. V√©rifier les acc√®s aux modules
    console.log('\n2Ô∏è‚É£ V√©rification des acc√®s aux modules...');
    const { data: accessData, error: accessError } = await supabase
      .from('module_access')
      .select('*')
      .eq('user_id', userData.id);

    if (accessError) {
      console.error('‚ùå Erreur r√©cup√©ration acc√®s:', accessError);
      return;
    }

    console.log('üìä Acc√®s trouv√©s:', accessData?.length || 0);
    
    if (accessData && accessData.length > 0) {
      for (const access of accessData) {
        console.log('  - Module ID:', access.module_id, 'Type:', access.access_type, 'Cr√©√©:', access.created_at);
      }
    }

    // 3. V√©rifier sp√©cifiquement Stable Diffusion
    console.log('\n3Ô∏è‚É£ V√©rification sp√©cifique Stable Diffusion...');
    const { data: stableDiffusion, error: sdError } = await supabase
      .from('modules')
      .select('id, title, price')
      .eq('title', 'Stable diffusion')
      .single();

    if (sdError) {
      console.error('‚ùå Erreur r√©cup√©ration Stable Diffusion:', sdError);
      return;
    }

    console.log('‚úÖ Stable Diffusion trouv√©:', stableDiffusion);

    // 4. V√©rifier si l'utilisateur a acc√®s √† Stable Diffusion
    const hasAccess = accessData?.some(access => access.module_id === stableDiffusion.id);
    console.log('\n4Ô∏è‚É£ R√©sultat:');
    console.log(hasAccess ? '‚úÖ L\'utilisateur a acc√®s √† Stable Diffusion' : '‚ùå L\'utilisateur n\'a PAS acc√®s √† Stable Diffusion');

    // 5. V√©rifier les abonnements Stripe
    console.log('\n5Ô∏è‚É£ V√©rification des abonnements Stripe...');
    const { data: subscriptions, error: subError } = await supabase
      .from('user_subscriptions')
      .select('*')
      .eq('user_id', userData.id);

    if (subError) {
      console.error('‚ùå Erreur r√©cup√©ration abonnements:', subError);
      return;
    }

    console.log('üìä Abonnements Stripe trouv√©s:', subscriptions?.length || 0);
    
    if (subscriptions && subscriptions.length > 0) {
      for (const sub of subscriptions) {
        console.log('  - Subscription ID:', sub.stripe_subscription_id, 'Status:', sub.status, 'Cr√©√©:', sub.created_at);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkUserStableDiffusion(); 