const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyMigration() {
  try {
    console.log('üîç V√©rification de la migration des cat√©gories multiples...\n');

    // 1. V√©rifier que la table module_categories existe
    console.log('üìã V√©rification de la table module_categories...');
    const { data: tableCheck, error: tableError } = await supabase
      .from('module_categories')
      .select('count')
      .limit(1);

    if (tableError) {
      console.error('‚ùå Table module_categories non trouv√©e:', tableError);
      return;
    }

    console.log('‚úÖ Table module_categories existe');

    // 2. R√©cup√©rer tous les modules avec leurs cat√©gories
    console.log('\nüìã R√©cup√©ration des modules avec cat√©gories...');
    const { data: modules, error: modulesError } = await supabase
      .from('modules')
      .select(`
        id,
        title,
        category,
        module_categories (
          category
        )
      `)
      .order('title');

    if (modulesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des modules:', modulesError);
      return;
    }

    console.log(`üìä ${modules.length} modules trouv√©s\n`);

    // 3. Analyser les cat√©gories
    let modulesWithMultipleCategories = 0;
    let totalCategories = 0;

    console.log('üìã Analyse des cat√©gories par module:');
    modules.forEach(module => {
      const categories = module.module_categories?.map(mc => mc.category) || [];
      const hasMultipleCategories = categories.length > 1;
      
      if (hasMultipleCategories) {
        modulesWithMultipleCategories++;
      }
      
      totalCategories += categories.length;

      console.log(`  - ${module.title}:`);
      console.log(`    Cat√©gorie principale: ${module.category || 'Aucune'}`);
      console.log(`    Cat√©gories multiples: ${categories.join(', ') || 'Aucune'}`);
      console.log(`    Nombre total: ${categories.length}`);
      console.log('');
    });

    // 4. Statistiques
    console.log('üìä Statistiques:');
    console.log(`  - Modules avec cat√©gories multiples: ${modulesWithMultipleCategories}`);
    console.log(`  - Total des cat√©gories: ${totalCategories}`);
    console.log(`  - Moyenne par module: ${(totalCategories / modules.length).toFixed(2)}`);

    // 5. V√©rifier les cat√©gories uniques
    console.log('\nüìã Cat√©gories uniques utilis√©es:');
    const allCategories = modules.flatMap(module => 
      module.module_categories?.map(mc => mc.category) || []
    );
    const uniqueCategories = [...new Set(allCategories)].sort();
    
    uniqueCategories.forEach(category => {
      const count = allCategories.filter(cat => cat === category).length;
      console.log(`  - ${category}: ${count} modules`);
    });

    // 6. V√©rifier la coh√©rence
    console.log('\nüîç V√©rification de la coh√©rence...');
    let inconsistencies = 0;
    
    modules.forEach(module => {
      const primaryCategory = module.category;
      const multipleCategories = module.module_categories?.map(mc => mc.category) || [];
      
      // V√©rifier si la cat√©gorie principale est dans les cat√©gories multiples
      if (primaryCategory && !multipleCategories.includes(primaryCategory)) {
        console.log(`  ‚ö†Ô∏è Incoh√©rence: ${module.title} - cat√©gorie principale "${primaryCategory}" pas dans les multiples`);
        inconsistencies++;
      }
    });

    if (inconsistencies === 0) {
      console.log('‚úÖ Aucune incoh√©rence d√©tect√©e');
    } else {
      console.log(`‚ö†Ô∏è ${inconsistencies} incoh√©rences d√©tect√©es`);
    }

    console.log('\n‚úÖ V√©rification termin√©e avec succ√®s !');
    console.log('üí° La migration des cat√©gories multiples est fonctionnelle');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cuter le script
verifyMigration(); 