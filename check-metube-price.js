require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkMetubePrice() {
  console.log('üîç V√©rification du prix du module Metube');
  
  try {
    // V√©rifier le module Metube
    const { data: metubeData, error: metubeError } = await supabase
      .from('modules')
      .select('id, title, price, category')
      .eq('title', 'Metube')
      .single();

    if (metubeError) {
      console.error('‚ùå Erreur r√©cup√©ration Metube:', metubeError);
      return;
    }

    console.log('‚úÖ Module Metube trouv√©:', metubeData);
    console.log('üí∞ Prix:', metubeData.price, '(Type:', typeof metubeData.price + ')');
    console.log('üîç Condition card.price === 0:', metubeData.price === 0);
    console.log('üîç Condition card.price === "0":', metubeData.price === "0");

    // V√©rifier aussi les autres modules gratuits
    console.log('\nüìä V√©rification des autres modules gratuits...');
    const { data: allModules, error: allError } = await supabase
      .from('modules')
      .select('id, title, price')
      .order('title');

    if (allError) {
      console.error('‚ùå Erreur r√©cup√©ration modules:', allError);
      return;
    }

    console.log('üìã Tous les modules:');
    allModules?.forEach(module => {
      console.log(`  - ${module.title}: ‚Ç¨${module.price} (Type: ${typeof module.price})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

checkMetubePrice(); 