// Charger les variables d'environnement
require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testAddStableDiffusion() {
  console.log('üîç Test d\'ajout du module Stable Diffusion');
  
  const userEmail = 'formateur_tic@hotmail.com';
  const moduleTitle = 'Stable diffusion';
  const sessionId = 'test_session_' + Date.now();
  
  try {
    // 1. V√©rifier si le module Stable Diffusion existe
    console.log('\n1Ô∏è‚É£ V√©rification du module Stable Diffusion...');
    const { data: moduleData, error: moduleError } = await supabase
      .from('modules')
      .select('*')
      .eq('title', moduleTitle)
      .single();
    
    if (moduleError || !moduleData) {
      console.error('‚ùå Module non trouv√©:', moduleTitle);
      return;
    }
    
    console.log('‚úÖ Module trouv√©:', {
      id: moduleData.id,
      title: moduleData.title,
      price: moduleData.price
    });
    
    // 2. R√©cup√©rer l'utilisateur par email (approche alternative)
    console.log('\n2Ô∏è‚É£ R√©cup√©ration de l\'utilisateur...');
    let { data: userData, error: userError } = await supabase
      .from('auth.users')
      .select('id')
      .eq('email', userEmail)
      .single();
    
    if (userError || !userData) {
      console.error('‚ùå Utilisateur non trouv√©:', userEmail);
      console.log('Tentative avec une approche diff√©rente...');
      
      // Essayer de r√©cup√©rer depuis une table profiles si elle existe
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .eq('email', userEmail)
        .single();
      
      if (profileError || !profileData) {
        console.error('‚ùå Utilisateur non trouv√© dans profiles non plus');
        return;
      }
      
      console.log('‚úÖ Utilisateur trouv√© via profiles:', profileData.id);
      userData = profileData;
    } else {
      console.log('‚úÖ Utilisateur trouv√©:', userData.id);
    }
    
    // 3. V√©rifier si l'acc√®s existe d√©j√†
    console.log('\n3Ô∏è‚É£ V√©rification des acc√®s existants...');
    const { data: existingAccess, error: checkError } = await supabase
      .from('module_access')
      .select('*')
      .eq('user_id', userData.id)
      .eq('module_id', moduleData.id);
    
    if (checkError) {
      console.error('‚ùå Erreur v√©rification acc√®s:', checkError);
      return;
    }
    
    console.log('üìä Acc√®s existants:', existingAccess?.length || 0);
    
    if (existingAccess && existingAccess.length > 0) {
      console.log('‚úÖ L\'utilisateur a d√©j√† acc√®s √† Stable Diffusion');
      return;
    }
    
    // 4. Ajouter l'acc√®s au module
    console.log('\n4Ô∏è‚É£ Ajout de l\'acc√®s au module...');
    const { data: accessData, error: accessError } = await supabase
      .from('module_access')
      .insert({
        user_id: userData.id,
        module_id: moduleData.id,
        access_type: 'purchase',
        metadata: {
          session_id: sessionId,
          purchased_at: new Date().toISOString(),
          test: true
        }
      })
      .select()
      .single();
    
    if (accessError) {
      console.error('‚ùå Erreur cr√©ation acc√®s:', accessError);
      return;
    }
    
    console.log('‚úÖ Acc√®s cr√©√©:', accessData.id);
    
    // 5. V√©rifier que l'acc√®s appara√Æt dans la page encours
    console.log('\n5Ô∏è‚É£ V√©rification de l\'apparition dans /encours...');
    const { data: encoursData, error: encoursError } = await supabase
      .from('module_access')
      .select('*')
      .eq('user_id', userData.id);
    
    if (encoursError) {
      console.error('‚ùå Erreur r√©cup√©ration /encours:', encoursError);
      return;
    }
    
    console.log('üìä Modules dans /encours:', encoursData?.length || 0);
    encoursData?.forEach((access, index) => {
      console.log(`  ${index + 1}. Module ID: ${access.module_id}, Type: ${access.access_type}`);
    });
    
    // 6. R√©cup√©rer les d√©tails des modules
    console.log('\n6Ô∏è‚É£ D√©tails des modules...');
    for (const access of encoursData || []) {
      const { data: moduleDetails, error: moduleDetailsError } = await supabase
        .from('modules')
        .select('title, price')
        .eq('id', access.module_id)
        .single();
      
      if (moduleDetailsError) {
        console.log(`  ‚ùå Module ${access.module_id}: Erreur - ${moduleDetailsError.message}`);
      } else {
        console.log(`  ‚úÖ Module ${access.module_id}: ${moduleDetails.title} (‚Ç¨${moduleDetails.price})`);
      }
    }
    
    console.log('\nüéâ Test termin√© avec succ√®s !');
    console.log('L\'utilisateur formateur_tic@hotmail.com a maintenant acc√®s √† Stable Diffusion');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
testAddStableDiffusion(); 