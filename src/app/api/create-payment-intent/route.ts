import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Debug - API create-payment-intent appel√©e');
    
    // V√©rifier la cl√© Stripe
    if (!process.env.STRIPE_SECRET_KEY) {
      console.error('‚ùå Erreur - STRIPE_SECRET_KEY manquante');
      return NextResponse.json(
        { error: 'Configuration Stripe manquante' },
        { status: 500 }
      );
    }

    console.log('üîç Debug - STRIPE_SECRET_KEY existe:', !!process.env.STRIPE_SECRET_KEY);
    console.log('üîç Debug - STRIPE_SECRET_KEY commence par:', process.env.STRIPE_SECRET_KEY?.substring(0, 7));

    // Initialiser Stripe
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
      apiVersion: '2025-06-30.basil',
    });
    
    const body = await request.json();
    const { items, customerEmail, type } = body;

    console.log('üîç Debug - Cr√©ation session Stripe:', { items, customerEmail, type });
    console.log('üîç Debug - Body complet:', body);

    if (!customerEmail) {
      console.error('‚ùå Erreur - Email client manquant');
      return NextResponse.json(
        { error: 'Email client requis' },
        { status: 400 }
      );
    }

    if (!items || items.length === 0) {
      console.error('‚ùå Erreur - Items manquants');
      return NextResponse.json(
        { error: 'Items requis' },
        { status: 400 }
      );
    }

    // Calculer le montant total √† partir des items
    const totalAmount = items.reduce((total: number, item: any) => total + (item.price || 0), 0);
    
    if (totalAmount <= 0) {
      console.error('‚ùå Erreur - Montant total invalide:', totalAmount);
      return NextResponse.json(
        { error: 'Montant total invalide' },
        { status: 400 }
      );
    }

    console.log('üîç Debug - Validation OK, cr√©ation session...');
    console.log('üîç Debug - Montant total:', totalAmount);
    console.log('üîç Debug - Items:', items.map((item: any) => ({ title: item.title, price: item.price })));

    // V√©rifier l'URL de l'application
    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'; // URL relative pour les tests
    console.log('üîç Debug - URL de l\'application:', appUrl);

    // Pr√©parer les m√©tadonn√©es limit√©es (max 500 caract√®res)
    const limitedItems = items.map((item: any) => ({
      id: item.id,
      title: item.title?.substring(0, 50) || 'Module IA', // Limiter le titre
      price: item.price || 0
    }));

    const metadata = {
      customer_email: customerEmail,
      items_count: items.length.toString(),
      total_amount: totalAmount.toString(),
      type: type || 'payment',
      // Stocker seulement les IDs des items pour √©viter de d√©passer la limite
      items_ids: items.map((item: any) => item.id).join(',')
    };

    console.log('üîç Debug - M√©tadonn√©es:', metadata);

    // Cr√©er une session de paiement avec les m√©tadonn√©es limit√©es
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: items.map((item: any) => ({
        price_data: {
          currency: 'eur',
          product_data: {
            name: item.title || 'Module IA',
            description: item.description?.substring(0, 100) || 'Module d\'intelligence artificielle',
          },
          unit_amount: Math.round((item.price || 0) * 100), // Convertir en centimes
        },
        quantity: 1,
      })),
      mode: type === 'subscription' ? 'subscription' : 'payment',
      success_url: `${appUrl}/success?session_id={CHECKOUT_SESSION_ID}&module=${encodeURIComponent(items[0]?.title || 'Module IA')}`,
      cancel_url: `${appUrl}/cancel?canceled=true`,
      customer_email: customerEmail,
      metadata: metadata,
    });

    console.log('üîç Debug - Session cr√©√©e:', session.id);
    console.log('üîç Debug - URL session:', session.url);

    return NextResponse.json({
      sessionId: session.id,
      url: session.url,
    });
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation session Stripe:', error);
    
    // Log plus d√©taill√© de l'erreur
    if (error instanceof Error) {
      console.error('‚ùå Message d\'erreur:', error.message);
      console.error('‚ùå Stack trace:', error.stack);
    }
    
    // V√©rifier si c'est une erreur Stripe
    if (error && typeof error === 'object' && 'type' in error) {
      console.error('‚ùå Type d\'erreur Stripe:', (error as any).type);
      console.error('‚ùå Code d\'erreur Stripe:', (error as any).code);
    }
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la cr√©ation de la session',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
} 