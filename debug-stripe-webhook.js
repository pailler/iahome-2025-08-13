require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');
const Stripe = require('stripe');

// Configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: '2025-06-30.basil',
});

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugStripeWebhook() {
  console.log('üîç Diagnostic approfondi du webhook Stripe...');
  
  // 1. V√©rifier la configuration Stripe
  console.log('\nüìã Configuration Stripe:');
  console.log('Mode:', process.env.STRIPE_SECRET_KEY?.includes('sk_test_') ? 'Test' : 'Live');
  console.log('Webhook Secret:', process.env.STRIPE_WEBHOOK_SECRET ? 'Configur√©' : 'Manquant');
  
  // 2. V√©rifier les webhooks configur√©s dans Stripe
  console.log('\nüìã Webhooks Stripe configur√©s:');
  try {
    const webhooks = await stripe.webhookEndpoints.list();
    console.log('‚úÖ Webhooks trouv√©s:', webhooks.data.length);
    
    webhooks.data.forEach((webhook, index) => {
      console.log(`  ${index + 1}. URL: ${webhook.url}`);
      console.log(`     Status: ${webhook.status}`);
      console.log(`     √âv√©nements: ${webhook.enabled_events.join(', ')}`);
      console.log(`     Cr√©√©: ${new Date(webhook.created * 1000).toLocaleString()}`);
      console.log('');
    });
    
    // V√©rifier si notre webhook est configur√©
    const ourWebhook = webhooks.data.find(w => 
      w.url.includes('home.regispailler.fr/api/webhooks/stripe') ||
      w.url.includes('localhost:3000/api/webhooks/stripe')
    );
    
    if (ourWebhook) {
      console.log('‚úÖ Notre webhook est configur√©:', ourWebhook.url);
      console.log('Status:', ourWebhook.status);
    } else {
      console.log('‚ùå Notre webhook n\'est PAS configur√© dans Stripe');
      console.log('üí° Il faut configurer le webhook vers: https://home.regispailler.fr/api/webhooks/stripe');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration webhooks:', error.message);
  }
  
  // 3. V√©rifier les √©v√©nements r√©cents
  console.log('\nüìã √âv√©nements Stripe r√©cents:');
  try {
    const events = await stripe.events.list({
      limit: 10,
      types: ['payment_intent.succeeded', 'checkout.session.completed']
    });
    
    console.log('‚úÖ √âv√©nements trouv√©s:', events.data.length);
    
    events.data.forEach((event, index) => {
      console.log(`  ${index + 1}. Type: ${event.type}`);
      console.log(`     ID: ${event.id}`);
      console.log(`     Cr√©√©: ${new Date(event.created * 1000).toLocaleString()}`);
      
      // V√©rifier les m√©tadonn√©es
      if (event.data.object.metadata) {
        console.log(`     M√©tadonn√©es:`, event.data.object.metadata);
      }
      
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration √©v√©nements:', error.message);
  }
  
  // 4. V√©rifier les paiements r√©cents
  console.log('\nüìã Paiements r√©cents:');
  try {
    const paymentIntents = await stripe.paymentIntents.list({
      limit: 10
    });
    
    console.log('‚úÖ Paiements trouv√©s:', paymentIntents.data.length);
    
    paymentIntents.data.forEach((pi, index) => {
      console.log(`  ${index + 1}. ID: ${pi.id}`);
      console.log(`     Status: ${pi.status}`);
      console.log(`     Montant: ${pi.amount} ${pi.currency}`);
      console.log(`     Cr√©√©: ${new Date(pi.created * 1000).toLocaleString()}`);
      
      if (pi.metadata) {
        console.log(`     M√©tadonn√©es:`, pi.metadata);
      }
      
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration paiements:', error.message);
  }
  
  // 5. V√©rifier les acc√®s modules dans la base de donn√©es
  console.log('\nüìã Acc√®s modules dans la base de donn√©es:');
  const { data: moduleAccess, error: accessError } = await supabase
    .from('module_access')
    .select(`
      id,
      user_id,
      module_id,
      access_type,
      created_at,
      metadata,
      modules!inner(title)
    `)
    .order('created_at', { ascending: false })
    .limit(10);
    
  if (accessError) {
    console.error('‚ùå Erreur r√©cup√©ration acc√®s modules:', accessError);
  } else {
    console.log('‚úÖ Acc√®s modules trouv√©s:', moduleAccess.length);
    moduleAccess.forEach((access, index) => {
      console.log(`  ${index + 1}. ID: ${access.id}`);
      console.log(`     User: ${access.user_id}`);
      console.log(`     Module: ${access.modules.title} (ID: ${access.module_id})`);
      console.log(`     Type: ${access.access_type}`);
      console.log(`     Cr√©√©: ${new Date(access.created_at).toLocaleString()}`);
      
      if (access.metadata) {
        console.log(`     M√©tadonn√©es:`, access.metadata);
      }
      
      console.log('');
    });
  }
  
  // 6. Analyser le probl√®me
  console.log('\nüîç Analyse du probl√®me:');
  
  const issues = [];
  
  // V√©rifier si le webhook est configur√©
  try {
    const webhooks = await stripe.webhookEndpoints.list();
    const ourWebhook = webhooks.data.find(w => 
      w.url.includes('home.regispailler.fr/api/webhooks/stripe')
    );
    
    if (!ourWebhook) {
      issues.push('‚ùå Webhook Stripe non configur√© vers https://home.regispailler.fr/api/webhooks/stripe');
    } else if (ourWebhook.status !== 'enabled') {
      issues.push('‚ùå Webhook Stripe d√©sactiv√©');
    }
  } catch (error) {
    issues.push('‚ùå Impossible de v√©rifier la configuration du webhook');
  }
  
  // V√©rifier les m√©tadonn√©es des paiements
  try {
    const paymentIntents = await stripe.paymentIntents.list({ limit: 5 });
    const missingMetadata = paymentIntents.data.filter(pi => 
      !pi.metadata?.customer_email || !pi.metadata?.items_ids
    );
    
    if (missingMetadata.length > 0) {
      issues.push('‚ùå Certains paiements n\'ont pas les m√©tadonn√©es requises (customer_email, items_ids)');
    }
  } catch (error) {
    issues.push('‚ùå Impossible de v√©rifier les m√©tadonn√©es des paiements');
  }
  
  // V√©rifier les permissions Supabase
  if (accessError) {
    issues.push('‚ùå Probl√®me de permissions sur la table module_access');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ Aucun probl√®me √©vident d√©tect√©');
    console.log('üí° Le probl√®me pourrait √™tre:');
    console.log('   - Le webhook ne re√ßoit pas les √©v√©nements');
    console.log('   - Erreur dans le code du webhook');
    console.log('   - Probl√®me de r√©seau entre Stripe et votre serveur');
  } else {
    console.log('‚ùå Probl√®mes d√©tect√©s:');
    issues.forEach(issue => console.log(issue));
  }
  
  // 7. Recommandations
  console.log('\nüìã Recommandations:');
  console.log('1. Configurer le webhook Stripe vers: https://home.regispailler.fr/api/webhooks/stripe');
  console.log('2. V√©rifier que les m√©tadonn√©es des paiements contiennent customer_email et items_ids');
  console.log('3. V√©rifier les logs du serveur Next.js lors d\'un paiement');
  console.log('4. Tester avec un paiement en mode test');
  console.log('5. V√©rifier les permissions RLS sur la table module_access');
  
  console.log('\nüîç Diagnostic termin√©');
}

debugStripeWebhook().catch(console.error); 