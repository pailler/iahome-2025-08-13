#!/bin/bash

# Script de d√©ploiement en production
# Migration vers iahome.fr

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement en production..."
echo "=================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. V√©rifier que les fichiers n√©cessaires existent
log_info "1. V√©rification des fichiers n√©cessaires..."

required_files=(
    ".env.production"
    "docker-compose.prod.yml"
    "Dockerfile"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        log_success "Fichier trouv√©: $file"
    else
        log_error "Fichier manquant: $file"
        exit 1
    fi
done

# 2. Arr√™ter les conteneurs existants
log_info "2. Arr√™t des conteneurs existants..."
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
log_success "Conteneurs arr√™t√©s"

# 3. Nettoyer les images
log_info "3. Nettoyage des images..."
docker system prune -f
log_success "Images nettoy√©es"

# 4. Reconstruire et d√©marrer
log_info "4. Construction et d√©marrage des services..."
docker-compose -f docker-compose.prod.yml up -d --build

# 5. V√©rifier la sant√© des services
log_info "5. V√©rification de la sant√© des services..."
echo "Attente du d√©marrage des services..."
sleep 30

# 6. Test de connectivit√©
log_info "6. Test de connectivit√©..."

# Test de l'application
if curl -f http://localhost:3000/api/health 2>/dev/null; then
    log_success "Application accessible sur le port 3000"
else
    log_warning "Application non accessible sur le port 3000"
fi

# Test de Nginx
if curl -I http://localhost:80 2>/dev/null | grep -q "HTTP"; then
    log_success "Nginx accessible sur le port 80"
else
    log_warning "Nginx non accessible sur le port 80"
fi

# Test de Traefik
if curl -I http://localhost:8080 2>/dev/null | grep -q "HTTP"; then
    log_success "Traefik accessible sur le port 8080"
else
    log_warning "Traefik non accessible sur le port 8080"
fi

# 7. Afficher le statut des conteneurs
log_info "7. Statut des conteneurs..."
docker-compose -f docker-compose.prod.yml ps

# 8. Afficher les logs r√©cents
log_info "8. Logs r√©cents..."
docker-compose -f docker-compose.prod.yml logs --tail=10

# 9. R√©sum√© final
echo ""
echo "=================================="
log_success "D√©ploiement termin√© avec succ√®s !"
echo ""
echo "üìã R√©sum√© :"
echo "  ‚úÖ Conteneurs arr√™t√©s et nettoy√©s"
echo "  ‚úÖ Services reconstruits et d√©marr√©s"
echo "  ‚úÖ Tests de connectivit√© effectu√©s"
echo ""
echo "üåê URLs d'acc√®s :"
echo "  - Application : http://localhost:3000"
echo "  - Nginx : http://localhost:80"
echo "  - Traefik Dashboard : http://localhost:8080"
echo ""
echo "üîß Commandes utiles :"
echo "  - Logs : docker-compose -f docker-compose.prod.yml logs -f"
echo "  - Statut : docker-compose -f docker-compose.prod.yml ps"
echo "  - Arr√™ter : docker-compose -f docker-compose.prod.yml down"
echo ""
echo "üìÅ Prochaines √©tapes :"
echo "  1. Configurer le DNS pour iahome.fr"
echo "  2. Tester l'acc√®s via le domaine"
echo "  3. V√©rifier les certificats SSL"
echo "=================================="

log_success "D√©ploiement termin√© avec succ√®s !" 