# Script de test pour v√©rifier l'automatisation des modules
# Ce script teste l'API de g√©n√©ration de token webhook

Write-Host "üß™ Test de l'automatisation des modules - IAHome" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# Configuration
$baseUrl = $env:NEXT_PUBLIC_APP_URL
if (-not $baseUrl) {
    $baseUrl = "http://localhost:3000"
}

Write-Host "üåê URL de base: $baseUrl" -ForegroundColor Yellow

# Test 1: V√©rifier que l'API webhook est accessible
Write-Host "`nüîç Test 1: V√©rification de l'API webhook..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/generate-module-token-webhook" -Method POST -ContentType "application/json" -Body '{"moduleId":"1","userId":"test","paymentId":"test_payment"}' -ErrorAction Stop
    Write-Host "‚úÖ API webhook accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur API webhook: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: V√©rifier que l'API de g√©n√©ration de token est accessible
Write-Host "`nüîç Test 2: V√©rification de l'API de g√©n√©ration de token..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$baseUrl/api/generate-module-token" -Method POST -ContentType "application/json" -Body '{"moduleId":"1","moduleTitle":"Test Module"}' -ErrorAction Stop
    Write-Host "‚úÖ API de g√©n√©ration de token accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur API de g√©n√©ration de token: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: V√©rifier que la page encours est accessible
Write-Host "`nüîç Test 3: V√©rification de la page encours..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/encours" -Method GET -ErrorAction Stop
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Page encours accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Page encours retourne le statut: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erreur page encours: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: V√©rifier la structure de la base de donn√©es
Write-Host "`nüîç Test 4: V√©rification de la structure de la base de donn√©es..." -ForegroundColor Yellow

# V√©rifier si les variables d'environnement Supabase sont d√©finies
$supabaseUrl = $env:NEXT_PUBLIC_SUPABASE_URL
$supabaseKey = $env.SUPABASE_SERVICE_ROLE_KEY

if (-not $supabaseUrl -or -not $supabaseKey) {
    Write-Host "‚ùå Variables d'environnement Supabase manquantes" -ForegroundColor Red
} else {
    Write-Host "‚úÖ Variables d'environnement Supabase trouv√©es" -ForegroundColor Green
    
    # Test de connexion √† Supabase
    try {
        $headers = @{
            "apikey" = $supabaseKey
            "Authorization" = "Bearer $supabaseKey"
            "Content-Type" = "application/json"
        }
        
        # Test de la table modules
        $modulesResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/modules?select=count" -Headers $headers -Method GET
        Write-Host "‚úÖ Table modules accessible" -ForegroundColor Green
        
        # Test de la table module_access
        $accessResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/module_access?select=count" -Headers $headers -Method GET
        Write-Host "‚úÖ Table module_access accessible" -ForegroundColor Green
        
        # Test de la table access_tokens
        $tokensResponse = Invoke-RestMethod -Uri "$supabaseUrl/rest/v1/access_tokens?select=count" -Headers $headers -Method GET
        Write-Host "‚úÖ Table access_tokens accessible" -ForegroundColor Green
        
    } catch {
        Write-Host "‚ùå Erreur connexion Supabase: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 5: V√©rifier les logs d'erreur
Write-Host "`nüîç Test 5: V√©rification des logs..." -ForegroundColor Yellow
$logFiles = @(
    "logs/nginx/error.log",
    "logs/traefik/access.log"
)

foreach ($logFile in $logFiles) {
    if (Test-Path $logFile) {
        $recentErrors = Get-Content $logFile -Tail 10 | Where-Object { $_ -match "error|Error|ERROR" }
        if ($recentErrors) {
            Write-Host "‚ö†Ô∏è Erreurs r√©centes dans $logFile:" -ForegroundColor Yellow
            $recentErrors | ForEach-Object { Write-Host "  $($_)" -ForegroundColor Gray }
        } else {
            Write-Host "‚úÖ Aucune erreur r√©cente dans $logFile" -ForegroundColor Green
        }
    } else {
        Write-Host "‚ÑπÔ∏è Fichier de log non trouv√©: $logFile" -ForegroundColor Gray
    }
}

Write-Host "`nüéØ Recommandations pour tester l'automatisation:" -ForegroundColor Cyan
Write-Host "1. Effectuez un paiement de test avec StableDiffusion" -ForegroundColor White
Write-Host "2. V√©rifiez que le webhook Stripe est configur√© correctement" -ForegroundColor White
Write-Host "3. Surveillez les logs pour d√©tecter les erreurs" -ForegroundColor White
Write-Host "4. V√©rifiez que le module appara√Æt dans la page /encours" -ForegroundColor White

Write-Host "`n‚úÖ Tests termin√©s!" -ForegroundColor Green
