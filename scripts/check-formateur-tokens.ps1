# Script PowerShell pour tester les tokens de formateur_tic@hotmail.com
# √Ä ex√©cuter pour v√©rifier que l'API fonctionne correctement

Write-Host "üîç Test des tokens de formateur_tic@hotmail.com" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

# URL de l'API
$apiUrl = "http://localhost:3000/api/get-user-tokens"

# Donn√©es de test
$testData = @{
    userEmail = "formateur_tic@hotmail.com"
} | ConvertTo-Json

Write-Host "üì° Appel de l'API: $apiUrl" -ForegroundColor Yellow
Write-Host "üìã Donn√©es envoy√©es: $testData" -ForegroundColor Yellow

try {
    # Appel de l'API
    $response = Invoke-RestMethod -Uri $apiUrl -Method POST -Body $testData -ContentType "application/json"
    
    Write-Host "‚úÖ R√©ponse re√ßue avec succ√®s!" -ForegroundColor Green
    Write-Host "üìä Nombre de tokens: $($response.tokens.Count)" -ForegroundColor Green
    
    if ($response.tokens.Count -gt 0) {
        Write-Host "`nüìã D√©tails des tokens:" -ForegroundColor Cyan
        foreach ($token in $response.tokens) {
            Write-Host "  - ID: $($token.id)" -ForegroundColor White
            Write-Host "    Nom: $($token.name)" -ForegroundColor White
            Write-Host "    Module: $($token.module_name)" -ForegroundColor White
            Write-Host "    Niveau: $($token.access_level)" -ForegroundColor White
            Write-Host "    Usage: $($token.current_usage)/$($token.max_usage)" -ForegroundColor White
            Write-Host "    Actif: $($token.is_active)" -ForegroundColor White
            Write-Host "    Expire: $($token.expires_at)" -ForegroundColor White
            Write-Host ""
        }
    } else {
        Write-Host "Aucun token trouv√© pour formateur_tic@hotmail.com" -ForegroundColor Yellow
    }
    
    Write-Host "üë§ Informations utilisateur:" -ForegroundColor Cyan
    Write-Host "  - ID: $($response.user.id)" -ForegroundColor White
    Write-Host "  - Email: $($response.user.email)" -ForegroundColor White
    
} catch {
    Write-Host "Erreur lors de l'appel API:" -ForegroundColor Red
    Write-Host "  Message: $($_.Exception.Message)" -ForegroundColor Red
    
    if ($_.Exception.Response) {
        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
        $responseBody = $reader.ReadToEnd()
        Write-Host "  R√©ponse: $responseBody" -ForegroundColor Red
    }
}

Write-Host "`nüîç Test de l'API d'ajout apr√®s paiement" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Test de l'API d'ajout apr√®s paiement
$paymentApiUrl = "http://localhost:3000/api/add-user-tokens-after-payment"
$paymentTestData = @{
    userEmail = "test@example.com"
    paymentSuccess = $true
} | ConvertTo-Json

Write-Host "üì° Appel de l'API de paiement: $paymentApiUrl" -ForegroundColor Yellow
Write-Host "üìã Donn√©es envoy√©es: $paymentTestData" -ForegroundColor Yellow

try {
    $paymentResponse = Invoke-RestMethod -Uri $paymentApiUrl -Method POST -Body $paymentTestData -ContentType "application/json"
    
    Write-Host "‚úÖ R√©ponse paiement re√ßue avec succ√®s!" -ForegroundColor Green
    Write-Host "üìä Tokens ajout√©s: $($paymentResponse.tokensAdded)" -ForegroundColor Green
    Write-Host "üí¨ Message: $($paymentResponse.message)" -ForegroundColor Green
    
} catch {
    Write-Host "Erreur lors de l'appel API de paiement:" -ForegroundColor Red
    Write-Host "  Message: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚úÖ Test termin√©!" -ForegroundColor Green
