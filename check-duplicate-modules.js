const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDuplicateModules() {
  console.log('üîç V√©rification des modules en double...');
  console.log('=' .repeat(60));

  try {
    // 1. R√©cup√©rer tous les modules
    console.log('1Ô∏è‚É£ R√©cup√©ration de tous les modules...');
    const { data: modules, error } = await supabase
      .from('modules')
      .select('*')
      .order('title', { ascending: true });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des modules:', error);
      return;
    }

    console.log(`   ‚úÖ ${modules.length} modules r√©cup√©r√©s\n`);

    // 2. Analyser les doublons
    console.log('2Ô∏è‚É£ Analyse des doublons...');
    const titleCounts = {};
    const duplicates = [];

    modules.forEach(module => {
      const title = module.title.trim();
      if (!titleCounts[title]) {
        titleCounts[title] = [];
      }
      titleCounts[title].push(module);
    });

    // Identifier les doublons
    Object.keys(titleCounts).forEach(title => {
      if (titleCounts[title].length > 1) {
        duplicates.push({
          title: title,
          modules: titleCounts[title]
        });
      }
    });

    if (duplicates.length === 0) {
      console.log('   ‚úÖ Aucun doublon trouv√© !');
      return;
    }

    console.log(`   ‚ö†Ô∏è ${duplicates.length} titre(s) avec des doublons trouv√©(s):\n`);

    // 3. Afficher les doublons
    duplicates.forEach((duplicate, index) => {
      console.log(`   ${index + 1}. "${duplicate.title}" (${duplicate.modules.length} occurrences):`);
      duplicate.modules.forEach((module, moduleIndex) => {
        console.log(`      - ID: ${module.id}, Cr√©√©: ${module.created_at}, Prix: ${module.price}`);
      });
      console.log('');
    });

    // 4. Proposer le nettoyage
    console.log('3Ô∏è‚É£ Proposition de nettoyage...');
    console.log('   Les modules les plus r√©cents seront conserv√©s, les plus anciens supprim√©s.\n');

    for (const duplicate of duplicates) {
      console.log(`   üìù Pour "${duplicate.title}":`);
      
      // Trier par date de cr√©ation (le plus r√©cent en premier)
      const sortedModules = duplicate.modules.sort((a, b) => 
        new Date(b.created_at) - new Date(a.created_at)
      );

      const toKeep = sortedModules[0];
      const toDelete = sortedModules.slice(1);

      console.log(`      ‚úÖ Garder: ID ${toKeep.id} (cr√©√© le ${toKeep.created_at})`);
      toDelete.forEach(module => {
        console.log(`      ‚ùå Supprimer: ID ${module.id} (cr√©√© le ${module.created_at})`);
      });
      console.log('');
    }

    // 5. Demander confirmation
    console.log('4Ô∏è‚É£ Voulez-vous proc√©der au nettoyage ?');
    console.log('   ‚ö†Ô∏è Cette action est irr√©versible !');
    console.log('   Tapez "YES" pour confirmer, ou appuyez sur Ctrl+C pour annuler.');

    // Simuler une confirmation automatique pour le script
    const shouldClean = process.argv.includes('--clean');
    
    if (shouldClean) {
      console.log('   üîÑ Nettoyage automatique activ√©...');
      await cleanDuplicates(duplicates);
    } else {
      console.log('   üí° Pour nettoyer automatiquement, relancez avec: node check-duplicate-modules.js --clean');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

async function cleanDuplicates(duplicates) {
  console.log('\nüßπ D√©but du nettoyage des doublons...');
  
  let totalDeleted = 0;
  let totalErrors = 0;

  for (const duplicate of duplicates) {
    console.log(`\n   üîÑ Nettoyage de "${duplicate.title}"...`);
    
    // Trier par date de cr√©ation (le plus r√©cent en premier)
    const sortedModules = duplicate.modules.sort((a, b) => 
      new Date(b.created_at) - new Date(a.created_at)
    );

    const toKeep = sortedModules[0];
    const toDelete = sortedModules.slice(1);

    console.log(`      ‚úÖ Garder: ID ${toKeep.id}`);
    
    // Supprimer les doublons
    for (const module of toDelete) {
      try {
        const { error } = await supabase
          .from('modules')
          .delete()
          .eq('id', module.id);

        if (error) {
          console.error(`      ‚ùå Erreur lors de la suppression de l'ID ${module.id}:`, error);
          totalErrors++;
        } else {
          console.log(`      ‚úÖ Supprim√©: ID ${module.id}`);
          totalDeleted++;
        }
      } catch (error) {
        console.error(`      ‚ùå Erreur lors de la suppression de l'ID ${module.id}:`, error);
        totalErrors++;
      }
    }
  }

  console.log('\n' + '=' .repeat(60));
  console.log('üéâ Nettoyage termin√© !');
  console.log(`   ‚úÖ Modules supprim√©s: ${totalDeleted}`);
  console.log(`   ‚ùå Erreurs: ${totalErrors}`);
  
  if (totalErrors === 0) {
    console.log('   üéØ Tous les doublons ont √©t√© supprim√©s avec succ√®s !');
  } else {
    console.log('   ‚ö†Ô∏è Certaines erreurs sont survenues. V√©rifiez les logs ci-dessus.');
  }
}

// Ex√©cuter la v√©rification
checkDuplicateModules(); 